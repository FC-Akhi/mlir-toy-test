//===- ToyDialectBase.cpp - Toy IR Dialect registration in MLIR ------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file initialize the ToyDialect for the Toy IR
//
//===----------------------------------------------------------------------===//

/// 'ToyDialect' member in namespace 'mlir::toy' is coming from this header.
#include "Dialect/ToyDialect/ToyDialectBase.h"




using namespace mlir;
using namespace mlir::toy;


/// This .cpp file for declaring ToyDialectBase class is autogenerated by
/// CMake function (in include/Dialect/ToyDialect/CMakeLists.txt) using the flag
/// "-gen-dialect-defs". Without this file, we cannot initialize the Dialect.
/// ToyDialectBase instance will be owned by the mlir::MLIRContext.
#include "Dialect/ToyDialect/ToyDialectBase.cpp.inc"



//===----------------------------------------------------------------------===//
// ToyDialect Initialize
//===----------------------------------------------------------------------===//

/// This header call is registering the ToyOps with ToyDialect class.
/// Different Ops member declaration are coming from this header.
/// How? because this header calls "ToyOps.h.inc". And also have the standard MLIR Interface lib calls like "BytecodeOpInterface.h", "CallInterfaces.h", etc.
#include "Dialect/ToyDialect/ToyOps.h"


/// Dialect initialization is needed. This is the point of registration of operations and types for the dialect.
/// Dialect initialization. This is the point of registration of operations
/// and types for the dialect.
void ToyDialect::initialize() {
    // Added in Ch 2.1
    // Add autogenerated ToyOps declaration (i.e. ToyOps.cpp.inc)
    // "addOperations<> coming from mlir/IR/Dialect.h"
    addOperations<
#define GET_OP_LIST
#include "Dialect/ToyDialect/ToyOps.cpp.inc"
      >();
}
